Ответ на первый вопрос по моему мнению будет использование замыкания в циклах создания ячеек и таблиц.
if (!("a" in window)) {
    var a = 1;
}
alert(a);// логически рассуждая условия цикла такие - если а в окне это ложь то к а присваиваем 1. Но у нас команда вывод а
поэтому условие цикла будут истины а не ложны, следовательно а будет как не определено и опять же мы не объявляли "а" перед условием
соответственно проверка будет не корректна и поэтому из возможных выриантов ответ будет а - неопределено.

var b = function a(x) {
    x && a(--x);
};
alert(a);// тут как бы все нормально но в теле функции просто аргумент потом склеивание через "и" и функция от декремента аргумента
если честно не понял пример но по сути должна быть либо ошибка либо ничего.

function a(x) {
    return x * 2;
}
var a;
alert(a);// тут все просто мы хоть и задали функцию от а но потом переназначили "а" объявив ее переменной и соответсвенно в выводе
получим неопределено или undefined

function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3);// тут у нас функция от 3ех аргументов, в теле функции мы уже объявили что 3 аргумент будет равен 10 и тут же его 
выводи, поэтому даже передав значение после в виде цифры 3 все равно в теле она перепишется и ответ будет 10

function a() {
    alert(this);
}
a.call(null);// тут тоже непонятно, создали функцию без аргумента, в теле обьявляем свойство "это" то есть принадлежность
функции а потом передаем ничего по моему мнению ответ будет null  или ничего undefined

